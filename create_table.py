#!/usr/bin/env python
"""
Script to manually create missing database tables for SecureDASSResult model.
"""

import os
import sys
import django

# Add the project directory to the Python path
sys.path.insert(0, os.path.dirname(__file__))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calmconnect_backend.settings')

# Setup Django
django.setup()

from django.db import connection

def create_secure_dass_result_table():
    """Create the mentalhealth_securedassresult table manually."""

    sql = """
    CREATE TABLE IF NOT EXISTS "mentalhealth_securedassresult" (
        "dassresult_ptr_id" bigint NOT NULL PRIMARY KEY,
        "encrypted_answers" text NULL,
        "encrypted_depression_score" text NULL,
        "encrypted_anxiety_score" text NULL,
        "encrypted_stress_score" text NULL,
        "data_hash" varchar(64) NOT NULL,
        "consent_given" boolean NOT NULL,
        "consent_timestamp" timestamp with time zone NULL,
        "encryption_version" varchar(10) NOT NULL,
        "access_count" integer NOT NULL CHECK ("access_count" >= 0),
        "last_accessed" timestamp with time zone NULL
    );
    """

    try:
        with connection.cursor() as cursor:
            cursor.execute(sql)
            print("Successfully created mentalhealth_securedassresult table")
    except Exception as e:
        print(f"Error creating table: {e}")
        return False

    # Add foreign key constraint
    fk_sql = """
    ALTER TABLE "mentalhealth_securedassresult"
    ADD CONSTRAINT "mentalhealth_secured_dassresult_ptr_id_17aac52a_fk_mentalhea"
    FOREIGN KEY ("dassresult_ptr_id")
    REFERENCES "mentalhealth_dassresult" ("id") DEFERRABLE INITIALLY DEFERRED;
    """

    try:
        with connection.cursor() as cursor:
            cursor.execute(fk_sql)
            print("Successfully added foreign key constraint")
    except Exception as e:
        print(f"Error adding foreign key: {e}")
        # Foreign key might already exist, which is okay

    return True

def create_dass_data_retention_policy_table():
    """Create the mentalhealth_dassdataretentionpolicy table manually."""

    sql = """
    CREATE TABLE IF NOT EXISTS "mentalhealth_dassdataretentionpolicy" (
        "id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        "policy_type" varchar(20) NOT NULL,
        "applied_date" timestamp with time zone NOT NULL,
        "retention_until" timestamp with time zone NULL,
        "reason" text NOT NULL,
        "approved_by_id" bigint NULL,
        "user_id" bigint NOT NULL
    );
    """

    try:
        with connection.cursor() as cursor:
            cursor.execute(sql)
            print("Successfully created mentalhealth_dassdataretentionpolicy table")
    except Exception as e:
        print(f"Error creating retention policy table: {e}")
        return False

    # Add constraints and indexes
    constraints_sql = """
    ALTER TABLE "mentalhealth_dassdataretentionpolicy"
    ADD CONSTRAINT "mentalhealth_dassdataret_user_id_policy_type_8308c412_uniq"
    UNIQUE ("user_id", "policy_type");

    ALTER TABLE "mentalhealth_dassdataretentionpolicy"
    ADD CONSTRAINT "mentalhealth_dassdat_approved_by_id_fc1312f2_fk_custom_us"
    FOREIGN KEY ("approved_by_id")
    REFERENCES "custom_user" ("id") DEFERRABLE INITIALLY DEFERRED;

    ALTER TABLE "mentalhealth_dassdataretentionpolicy"
    ADD CONSTRAINT "mentalhealth_dassdat_user_id_742e286d_fk_custom_us"
    FOREIGN KEY ("user_id")
    REFERENCES "custom_user" ("id") DEFERRABLE INITIALLY DEFERRED;

    CREATE INDEX "mentalhealth_dassdataretentionpolicy_approved_by_id_fc1312f2"
    ON "mentalhealth_dassdataretentionpolicy" ("approved_by_id");

    CREATE INDEX "mentalhealth_dassdataretentionpolicy_user_id_742e286d"
    ON "mentalhealth_dassdataretentionpolicy" ("user_id");
    """

    try:
        with connection.cursor() as cursor:
            cursor.execute(constraints_sql)
            print("Successfully added constraints and indexes for retention policy table")
    except Exception as e:
        print(f"Error adding constraints: {e}")

    return True

if __name__ == "__main__":
    print("Creating missing database tables...")

    success1 = create_secure_dass_result_table()
    success2 = create_dass_data_retention_policy_table()

    if success1 and success2:
        print("\nAll tables created successfully!")
        print("You can now test if SecureDASSResult.objects.count() works.")
    else:
        print("\nSome tables may not have been created successfully.")
