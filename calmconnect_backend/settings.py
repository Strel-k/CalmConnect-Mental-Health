"""
Django settings for calmconnect_backend project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import logging
from django.core.management.utils import get_random_secret_key
from decouple import Csv, AutoConfig

# Load environment variables from .env file
env_config = AutoConfig(search_path=os.path.dirname(os.path.dirname(__file__)))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- SECURITY: Load secrets from environment variables ---
OPENAI_API_KEY = env_config("OPENAI_API_KEY", default="")
print(f"OpenAI API Key loaded: {'Yes' if OPENAI_API_KEY else 'No'}")

# CRITICAL: Generate a random secret key if not provided
SECRET_KEY = env_config("DJANGO_SECRET_KEY", default="")
if not SECRET_KEY:
    if env_config('DJANGO_DEBUG', default='True', cast=bool):
        # Development fallback - generate random key
        SECRET_KEY = get_random_secret_key()
        print("WARNING: Using auto-generated SECRET_KEY for development. Set DJANGO_SECRET_KEY in production!")
    else:
        raise ValueError("DJANGO_SECRET_KEY environment variable must be set in production!")

# Email settings - use environment variables
EMAIL_HOST = env_config('EMAIL_HOST', default='sandbox.smtp.mailtrap.io')
EMAIL_HOST_USER = env_config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = env_config('EMAIL_HOST_PASSWORD', default='')
EMAIL_PORT = env_config('EMAIL_PORT', default='2525', cast=int)

# --- SECURITY: Production settings ---
# Set to False in production
DEBUG = env_config('DJANGO_DEBUG', default=True, cast=bool)
ALLOWED_HOSTS = env_config(
    'DJANGO_ALLOWED_HOSTS',
    default='localhost,127.0.0.1,testserver',
    cast=Csv()
)

# DRF configuration to ensure browser session auth works for API endpoints
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# Allow localhost origins for CSRF in development
CSRF_TRUSTED_ORIGINS = [
    'http://localhost',
    'http://localhost:8000',
    'http://127.0.0.1',
    'http://127.0.0.1:8000',
]

# --- SECURITY: HTTPS and cookies ---
# Enable security settings in production
SECURE_SSL_REDIRECT = not DEBUG  # Force HTTPS in production
SESSION_COOKIE_SECURE = not DEBUG  # Secure cookies in production
CSRF_COOKIE_SECURE = not DEBUG  # Secure CSRF cookies in production
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0  # 1 year HSTS in production
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
SECURE_HSTS_PRELOAD = not DEBUG
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'  # Prevent clickjacking

# --- ENHANCED SECURITY SETTINGS ---
# Session Security
SESSION_COOKIE_AGE = env_config('SESSION_COOKIE_AGE', default=3600, cast=int)  # 1 hour default
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookies
SESSION_COOKIE_SAMESITE = 'Strict'  # CSRF protection
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Expire sessions on browser close
SESSION_SAVE_EVERY_REQUEST = True  # Update session on every request

# CSRF Security
# In development, allow JS to read the CSRF cookie so AJAX can send X-CSRFToken
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = 'Strict'
CSRF_USE_SESSIONS = False

# Additional Security Headers
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'

# File Upload Security
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# --- SECURITY: Add django-ratelimit for API protection ---
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mentalhealth',
    'rest_framework',
    'channels',
    # Note: django-ratelimit is used as a decorator,
    # not as a Django app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'mentalhealth.middleware.SecurityMiddleware',  # Custom security middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'mentalhealth.middleware.LoginSecurityMiddleware',  # Login security
    'mentalhealth.middleware.AuditLoggingMiddleware',  # Security logging
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'mentalhealth.middleware.ContentSecurityMiddleware',  # CSP headers
]

ROOT_URLCONF = 'calmconnect_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),  # Project-level templates
            os.path.join(BASE_DIR, 'mentalhealth/templates/mentalhealth'),  # App-level templates
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'calmconnect_backend.wsgi.application'

# --- EMAIL ---
EMAIL_HOST = 'sandbox.smtp.mailtrap.io'
EMAIL_HOST_USER = 'd2ded003c8e726'
EMAIL_HOST_PASSWORD = '7a1e018014057e'
EMAIL_PORT = '2525'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env_config('DB_NAME', default='calmconnect_db'),
        'USER': env_config('DB_USER', default='postgres'),
        'PASSWORD': env_config('DB_PASSWORD', default='postgres'),
        'HOST': env_config('DB_HOST', default='localhost'),
        'PORT': env_config('DB_PORT', default='5432', cast=int),
        'OPTIONS': {
            'sslmode': 'require' if not DEBUG else 'prefer',
        },
    }
}
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Optional: Add login/logout redirect URLs
LOGIN_REDIRECT_URL = 'index'  # Changed from 'dashboard' to 'index'
LOGOUT_REDIRECT_URL = '/login/'
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        'OPTIONS': {
            'user_attributes': ('username', 'email', 'first_name', 'last_name', 'full_name'),
            'max_similarity': 0.7,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12,  # Increased from 8 to 12
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'mentalhealth/static/mentalhealth'),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
LOGIN_URL = 'login'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
AUTH_USER_MODEL = 'mentalhealth.CustomUser'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Channels Configuration
ASGI_APPLICATION = 'calmconnect_backend.asgi.application'

# Channel Layers (for WebSocket support)
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}

# Ensure ASGI is used for both HTTP and WebSocket
# Comment out WSGI_APPLICATION to force ASGI usage
# WSGI_APPLICATION = 'calmconnect_backend.wsgi.application'

# --- SECURITY LOGGING ---
# Create logs directory if it doesn't exist
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOGS_DIR, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'security': {
            'format': '[SECURITY] {asctime} {levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'calmconnect.log'),
            'formatter': 'verbose',
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'security.log'),
            'formatter': 'security',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'mentalhealth.middleware': {
            'handlers': ['security_file', 'console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['security_file'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}

# --- PRIVACY POLICY & CONSENT ---
# Ensure your privacy policy and user consent modal are updated to reflect:
# - Use of OpenAI for feedback
# - Data sent to OpenAI is anonymized (no PII)
# - Users must consent before DASS21 test
#
# See frontend/modal and privacy policy template for details.
